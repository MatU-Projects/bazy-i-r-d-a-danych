DECLARE
    numer_max DEPARTMENTS.DEPARTMENT_ID%TYPE;
    new_department_id DEPARTMENTS.DEPARTMENT_ID%TYPE;
    v_department_name DEPARTMENTS.DEPARTMENT_NAME%TYPE := 'EDUCATION';
BEGIN
    SELECT MAX(DEPARTMENT_ID) INTO numer_max FROM DEPARTMENTS;
    new_department_id := numer_max + 10;
    INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME)
    VALUES (new_department_id, v_department_name);
    UPDATE DEPARTMENTS
    SET LOCATION_ID = 3000
    WHERE DEPARTMENT_ID = new_department_id;
END;
/
--------------------------------------------------
CREATE TABLE nowa (field1 VARCHAR2(10));
BEGIN
    FOR i IN 1..10 LOOP
        IF i NOT IN (4, 6) THEN
            INSERT INTO nowa (field1) VALUES (TO_CHAR(i));
        END IF;
    END LOOP;
END;
/
--------------------------------------------------
DECLARE
    v_country COUNTRIES%ROWTYPE;
BEGIN
    SELECT * INTO v_country FROM COUNTRIES WHERE COUNTRY_ID = 'CA';
    DBMS_OUTPUT.PUT_LINE('Country Name: ' || v_country.COUNTRY_NAME ||
                         ', Region ID: ' || v_country.REGION_ID);
END;
/
--------------------------------------------------
DECLARE
    CURSOR c_emp IS
        SELECT LAST_NAME, SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50;
BEGIN
    FOR r_emp IN c_emp LOOP
        IF r_emp.SALARY > 3100 THEN
            DBMS_OUTPUT.PUT_LINE(r_emp.LAST_NAME || ': do not give raise');
        ELSE
            DBMS_OUTPUT.PUT_LINE(r_emp.LAST_NAME || ': give raise');
        END IF;
    END LOOP;
END;
/
--------------------------------------------------
DECLARE
    CURSOR c_emp(p_min_salary NUMBER, p_max_salary NUMBER, p_name_part VARCHAR2) IS
        SELECT FIRST_NAME, LAST_NAME, SALARY
        FROM EMPLOYEES
        WHERE SALARY BETWEEN p_min_salary AND p_max_salary
          AND UPPER(FIRST_NAME) LIKE '%' || UPPER(p_name_part) || '%';
BEGIN
    FOR r_emp IN c_emp(1000, 5000, 'A') LOOP
        DBMS_OUTPUT.PUT_LINE(r_emp.FIRST_NAME || ' ' || r_emp.LAST_NAME ||
                             ': ' || r_emp.SALARY);
    END LOOP;
END;
/

DECLARE
    CURSOR c_emp(p_min_salary NUMBER, p_max_salary NUMBER, p_name_part VARCHAR2) IS
        SELECT FIRST_NAME, LAST_NAME, SALARY
        FROM EMPLOYEES
        WHERE SALARY BETWEEN p_min_salary AND p_max_salary
          AND UPPER(FIRST_NAME) LIKE '%' || UPPER(p_name_part) || '%';
BEGIN
    FOR r_emp IN c_emp(5000, 20000, 'U') LOOP
        DBMS_OUTPUT.PUT_LINE(r_emp.FIRST_NAME || ' ' || r_emp.LAST_NAME ||
                             ': ' || r_emp.SALARY);
    END LOOP;
END;
/
--------------------------------------------------
CREATE OR REPLACE PROCEDURE add_job(p_job_id JOBS.JOB_ID%TYPE,
                                    p_job_title JOBS.JOB_TITLE%TYPE) IS
BEGIN
    INSERT INTO JOBS (JOB_ID, JOB_TITLE)
    VALUES (p_job_id, p_job_title);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
--------------------------------------------------
CREATE OR REPLACE PROCEDURE modify_job_title(p_job_id JOBS.JOB_ID%TYPE,
                                             p_new_title JOBS.JOB_TITLE%TYPE) IS
BEGIN
    UPDATE JOBS SET JOB_TITLE = p_new_title WHERE JOB_ID = p_job_id;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No jobs updated');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
--------------------------------------------------
CREATE OR REPLACE PROCEDURE delete_job(p_job_id JOBS.JOB_ID%TYPE) IS
BEGIN
    DELETE FROM JOBS WHERE JOB_ID = p_job_id;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'No jobs deleted');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
--------------------------------------------------
CREATE OR REPLACE PROCEDURE get_employee_info(p_emp_id EMPLOYEES.EMPLOYEE_ID%TYPE,
                                              p_salary OUT EMPLOYEES.SALARY%TYPE,
                                              p_last_name OUT EMPLOYEES.LAST_NAME%TYPE) IS
BEGIN
    SELECT SALARY, LAST_NAME INTO p_salary, p_last_name
    FROM EMPLOYEES WHERE EMPLOYEE_ID = p_emp_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_salary := NULL;
        p_last_name := NULL;
        DBMS_OUTPUT.PUT_LINE('Employee not found: ' || p_emp_id);
    WHEN OTHERS THEN
        p_salary := NULL;
        p_last_name := NULL;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
--------------------------------------------------
CREATE SEQUENCE emp_seq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE PROCEDURE add_employee(
    p_first_name EMPLOYEES.FIRST_NAME%TYPE DEFAULT NULL,
    p_last_name  EMPLOYEES.LAST_NAME%TYPE DEFAULT NULL,
    p_email      EMPLOYEES.EMAIL%TYPE DEFAULT NULL,
    p_salary     EMPLOYEES.SALARY%TYPE DEFAULT NULL
) IS
    v_emp_id EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
    IF p_salary > 20000 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Salary exceeds 20000');
    END IF;
    v_emp_id := emp_seq.NEXTVAL;
    INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, SALARY)
    VALUES (v_emp_id, p_first_name, p_last_name, p_email, p_salary);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
